{"version":3,"sources":["logo.svg","img/vs.png","components/Navbar.js","api/api.js","components/MyCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyle","makeStyles","theme","console","log","Navbar","AppBar","color","position","style","flexFlow","Toolbar","IconButton","edge","Typography","variant","flexGrow","Button","API_KEY","MyCard","match","useState","detail","setDatail","open","setOpen","showDetailBtnClicked","id","url","fetch","then","response","json","catch","error","getMatchDetail","data","handleClickOpen","handleClose","type","Card","background","matchStarted","marginTop","CardContent","Grid","container","justify","alignItems","spacing","item","width","src","require","alt","CardActions","onClick","marginLeft","Date","dateTimeGMT","toLocaleString","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","stat","fontStyle","fontWeight","score","DialogActions","autoFocus","App","matches","setMatches","useEffect","getMatches","className","Container","xs","map","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,wCCA3CD,EAAOC,QAAU,IAA0B,gC,0KCWrCC,EAAWC,aAAW,SAACC,GAC3BC,QAAQC,IAAI,QAASF,MAyBRG,EAtBA,WACGL,IAEhB,OACE,6BACE,kBAACM,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAS,SAASC,MAAO,CAAEC,SAAU,IAC3D,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQN,MAAM,WAC7B,kBAAC,IAAD,OAGF,kBAACO,EAAA,EAAD,CAAYC,QAAQ,MAApB,eAEA,0BAAMN,MAAO,CAAEO,SAAU,KAEzB,kBAACC,EAAA,EAAD,CAAQV,MAAM,WAAd,a,wEC9BJW,EAAU,+BCmIDC,EAhHA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACAC,mBAAS,IADT,mBACrBC,EADqB,KACbC,EADa,OAEJF,oBAAS,GAFL,mBAErBG,EAFqB,KAEfC,EAFe,KAsDtBC,EAAuB,SAACC,IDzDF,SAACA,GAC7B,IAAMC,EAAG,yDAAqDD,EAArD,mBAAkET,GAC3E,OAAOW,MAAMD,GACVE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BC,OAAM,SAACC,GAAD,OAAW/B,QAAQC,IAAI8B,OCsD9BC,CAAeR,GACZG,MAAK,SAACM,GACLjC,QAAQC,IAAIgC,GACZb,EAAUa,GACVC,OAEDJ,OAAM,SAACC,GACN/B,QAAQC,IAAI8B,OAIZG,EAAkB,WACtBZ,GAAQ,IAGJa,EAAc,WAClBb,GAAQ,IAGV,OACE,oCACiB,YAAdL,EAAMmB,KAvET,6BACE,kBAACC,EAAA,EAAD,CACE/B,MAAO,CACLgC,WAAYrB,EAAMsB,aAAe,UAAY,GAC7CC,UAAW,KAGb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,WAAW,SAASC,QAAS,GAC5D,kBAACJ,EAAA,EAAD,CAAMK,MAAI,GACR,kBAACpC,EAAA,EAAD,CAAYC,QAAQ,MAAMK,EAAM,YAElC,kBAACyB,EAAA,EAAD,CAAMK,MAAI,GACR,yBACEzC,MAAO,CAAE0C,MAAO,IAChBC,IAAKC,EAAQ,IACbC,IAAI,MAGR,kBAACT,EAAA,EAAD,CAAMK,MAAI,GACR,kBAACpC,EAAA,EAAD,CAAYC,QAAQ,MAAMK,EAAM,cAKtC,kBAACmC,EAAA,EAAD,KACE,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAAC9B,EAAA,EAAD,CACEuC,QAAS,WACP9B,EAAqBN,EAAK,YAE5BL,QAAQ,WACRR,MAAM,aALR,eASA,kBAACU,EAAA,EAAD,CACER,MAAO,CAAEgD,WAAY,GACrB1C,QAAQ,WACRR,MAAM,WAHR,iBAKiB,IAAImD,KAAKtC,EAAMuC,aAAaC,sBA8BN,GAC7C,kBAACC,EAAA,EAAD,CACErC,KAAMA,EACNsC,QAASxB,EACTyB,kBAAgB,qBAChBC,mBAAiB,4BAEjB,kBAACC,EAAA,EAAD,CAAatC,GAAG,sBAAsB,mBACtC,kBAACuC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAmBxC,GAAG,4BACpB,kBAACb,EAAA,EAAD,KAAaQ,EAAO8C,MACpB,kBAACtD,EAAA,EAAD,aAEE,0BAAML,MAAO,CAAE4D,UAAW,SAAUC,WAAY,SAC7ChD,EAAOoB,aAAe,UAAY,sBAGvC,kBAAC5B,EAAA,EAAD,aAEE,0BAAML,MAAO,CAAE4D,UAAW,SAAUC,WAAY,SAC7C,IACAhD,EAAOiD,UAKhB,kBAACC,EAAA,EAAD,KACE,kBAACvD,EAAA,EAAD,CAAQuC,QAASlB,EAAa/B,MAAM,UAAUkE,WAAS,GAAvD,a,QCvFKC,MA5Bf,WAAgB,IAAD,EACiBrD,mBAAS,IAD1B,mBACNsD,EADM,KACGC,EADH,KAYb,OATAC,qBAAU,YFRc,WACxB,IAAMjD,EAAG,iDAA6CV,GAEtD,OADAf,QAAQC,IAAI,MAAOwB,GACZC,MAAMD,GACVE,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBC,OAAM,SAACC,GACN/B,QAAQC,IAAI,SAAU8B,OECxB4C,GACGhD,MAAK,SAACM,GACLjC,QAAQC,IAAIgC,GACZwC,EAAWxC,EAAKuC,YAEjB1C,OAAM,SAACC,SACT,IAGD,yBAAK6C,UAAU,OACb,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAACnC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMK,MAAI,EAAC+B,GAAI,IACZN,EAAQO,KAAI,SAAC9D,GAAD,OACX,kBAAC,EAAD,CAAQA,MAAOA,YCdT+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlE,MACvB,2DCZNmE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEd/D,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAM+D,c","file":"static/js/main.375decf1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/vs.27b23a52.png\";","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport {\n  Button,\n  IconButton,\n  makeStyles,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyle = makeStyles((theme) => {\n  console.log(\"STYLE\", theme);\n});\n\nconst Navbar = () => {\n  const classes = useStyle();\n\n  return (\n    <div>\n      <AppBar color=\"primary\" position=\"static\" style={{ flexFlow: 1 }}>\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\">\n            <MenuIcon />\n          </IconButton>\n\n          <Typography variant=\"h6\">Live Score </Typography>\n\n          <span style={{ flexGrow: 1 }}></span>\n\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Navbar;\n","const API_KEY = \"yFDJrs2GepOLrk2XEA7KBL5luXg2\";\n\nexport const getMatches = () => {\n  const url = `https://cricapi.com/api/matches?apikey=${API_KEY}`;\n  console.log(\"URL\", url);\n  return fetch(url)\n    .then((response) => {\n      return response.json();\n    })\n    .catch((error) => {\n      console.log(\"ERROR \", error);\n    });\n};\n\n//get the score of the cuurent match\n\nexport const getMatchDetail = (id) => {\n  const url = `https://cricapi.com/api/cricketScore?unique_id=${id}&apikey=${API_KEY}`;\n  return fetch(url)\n    .then((response) => response.json())\n    .catch((error) => console.log(error));\n};\n","import React, { useState } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport { getMatchDetail } from \"../api/api\";\n\nconst MyCard = ({ match }) => {\n  const [detail, setDatail] = useState({});\n  const [open, setOpen] = useState(false);\n\n  const getMatchCard = () => (\n    <div>\n      <Card\n        style={{\n          background: match.matchStarted ? \"#e2e2e2\" : \"\",\n          marginTop: 15,\n        }}\n      >\n        <CardContent>\n          <Grid container justify=\"center\" alignItems=\"center\" spacing={4}>\n            <Grid item>\n              <Typography variant=\"h5\">{match[\"team-1\"]}</Typography>\n            </Grid>\n            <Grid item>\n              <img\n                style={{ width: 85 }}\n                src={require(\"../img/vs.png\")}\n                alt=\"\"\n              />\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h5\">{match[\"team-2\"]}</Typography>\n            </Grid>\n          </Grid>\n        </CardContent>\n\n        <CardActions>\n          <Grid container justify=\"center\">\n            <Button\n              onClick={() => {\n                showDetailBtnClicked(match[\"unique_id\"]);\n              }}\n              variant=\"outlined\"\n              color=\"secondary\"\n            >\n              Show Detail\n            </Button>\n            <Button\n              style={{ marginLeft: 5 }}\n              variant=\"outlined\"\n              color=\"primary\"\n            >\n              Starting time {new Date(match.dateTimeGMT).toLocaleString()}\n            </Button>\n          </Grid>\n        </CardActions>\n      </Card>\n    </div>\n  );\n\n  const showDetailBtnClicked = (id) => {\n    getMatchDetail(id)\n      .then((data) => {\n        console.log(data);\n        setDatail(data);\n        handleClickOpen();\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      {match.type == \"Twenty20\" ? getMatchCard() : \"\"}\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Match Detail...\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <Typography>{detail.stat}</Typography>\n            <Typography>\n              Match\n              <span style={{ fontStyle: \"italic\", fontWeight: \"bold\" }}>\n                {detail.matchStarted ? \"Started\" : \"Still not started\"}\n              </span>\n            </Typography>\n            <Typography>\n              Score\n              <span style={{ fontStyle: \"italic\", fontWeight: \"bold\" }}>\n                {\" \"}\n                {detail.score}\n              </span>\n            </Typography>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default MyCard;\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport MyCard from \"./components/MyCard\";\nimport { getMatches } from \"./api/api\";\nimport { Container, Grid, Typography } from \"@material-ui/core\";\nfunction App() {\n  const [matches, setMatches] = useState([]);\n\n  useEffect(() => {\n    getMatches()\n      .then((data) => {\n        console.log(data);\n        setMatches(data.matches);\n      })\n      .catch((error) => {});\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Container>\n        <Grid container>\n          <Grid item xs={12}>\n            {matches.map((match) => (\n              <MyCard match={match}></MyCard>\n            ))}\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}